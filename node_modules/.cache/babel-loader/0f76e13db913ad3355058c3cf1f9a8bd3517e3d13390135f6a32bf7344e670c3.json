{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Desktop/spr24/wp2/laundry-coms/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./styles/index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst WebSocket = require('ws');\nconst server = new WebSocket.Server({\n  port: 3000\n});\nvar timerEndTimes = [null, null, null, null];\nconst sendCurrentTime = () => {\n  var i = 0;\n  timerEndTimes.forEach(() => {\n    if (timerEndTimes[i] != null) {\n      const timerMsg = {\n        id: i,\n        endTime: timerEndTimes[i],\n        reset: false\n      };\n      server.clients.forEach(client => {\n        client.send(JSON.stringify(timerMsg));\n      });\n    }\n    i = i + 1;\n  });\n};\n\n// setInterval(sendCurrentTime, 5000);\n\n// https://www.linkedin.com/pulse/real-time-data-synchronization-react-websockets-fidisys/\nserver.on('connection', socket => {\n  socket.on('message', message => {\n    const timerMsg = JSON.parse(message);\n    if (timerMsg.type == \"requestTimer\") {\n      sendCurrentTime();\n    } else {\n      console.log('Received timer:', timerMsg.id);\n      timerEndTimes[timerMsg.id] = timerMsg.endTime;\n      console.log(timerEndTimes[timerMsg.id]);\n      server.clients.forEach(client => {\n        if (client !== socket && client.readyState === WebSocket.OPEN) {\n          client.send(message);\n        }\n      });\n    }\n  });\n});\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","reportWebVitals","BrowserRouter","Router","App","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","WebSocket","require","server","Server","port","timerEndTimes","sendCurrentTime","i","forEach","timerMsg","id","endTime","reset","clients","client","send","JSON","stringify","on","socket","message","parse","type","console","log","readyState","OPEN","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/luke/Desktop/spr24/wp2/laundry-coms/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./styles/index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst WebSocket = require('ws');\nconst server = new WebSocket.Server({port: 3000});\n\nvar timerEndTimes = [null,null,null,null];\n\nconst sendCurrentTime = () => {\n    var i = 0;\n    timerEndTimes.forEach( () => {\n        if(timerEndTimes[i] != null){\n                const timerMsg = {\n                    id: i,\n                    endTime: timerEndTimes[i],\n                    reset: false,\n                }\n                server.clients.forEach((client) => {\n                    client.send(JSON.stringify(timerMsg));      \n                });  \n        }\n        i = i+1 ;\n    });\n};\n\n// setInterval(sendCurrentTime, 5000);\n\n// https://www.linkedin.com/pulse/real-time-data-synchronization-react-websockets-fidisys/\nserver.on('connection', (socket) => {\n    socket.on('message', (message) => {\n        const timerMsg = JSON.parse(message);\n\n        if(timerMsg.type == \"requestTimer\"){\n            sendCurrentTime();\n        }\n        else{\n            console.log('Received timer:', timerMsg.id);\n            timerEndTimes[timerMsg.id] = timerMsg.endTime;\n            console.log(timerEndTimes[timerMsg.id]);\n            server.clients.forEach((client) => {\n                if(client !== socket && client.readyState === WebSocket.OPEN) {\n                    client.send(message);\n                }\n            });       \n        }\n    });\n});\n\n\nroot.render(\n  <React.StrictMode>\n      <Router>\n          <App />\n      </Router>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,oBAAoB;AAC3B,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,aAAa,IAAIC,MAAM,QAAQ,kBAAkB;AAC1D,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,IAAI,GAAGP,QAAQ,CAACQ,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjE,MAAMC,SAAS,GAAGC,OAAO,CAAC,IAAI,CAAC;AAC/B,MAAMC,MAAM,GAAG,IAAIF,SAAS,CAACG,MAAM,CAAC;EAACC,IAAI,EAAE;AAAI,CAAC,CAAC;AAEjD,IAAIC,aAAa,GAAG,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC;AAEzC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,IAAIC,CAAC,GAAG,CAAC;EACTF,aAAa,CAACG,OAAO,CAAE,MAAM;IACzB,IAAGH,aAAa,CAACE,CAAC,CAAC,IAAI,IAAI,EAAC;MACpB,MAAME,QAAQ,GAAG;QACbC,EAAE,EAAEH,CAAC;QACLI,OAAO,EAAEN,aAAa,CAACE,CAAC,CAAC;QACzBK,KAAK,EAAE;MACX,CAAC;MACDV,MAAM,CAACW,OAAO,CAACL,OAAO,CAAEM,MAAM,IAAK;QAC/BA,MAAM,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,CAAC;MACzC,CAAC,CAAC;IACV;IACAF,CAAC,GAAGA,CAAC,GAAC,CAAC;EACX,CAAC,CAAC;AACN,CAAC;;AAED;;AAEA;AACAL,MAAM,CAACgB,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAChCA,MAAM,CAACD,EAAE,CAAC,SAAS,EAAGE,OAAO,IAAK;IAC9B,MAAMX,QAAQ,GAAGO,IAAI,CAACK,KAAK,CAACD,OAAO,CAAC;IAEpC,IAAGX,QAAQ,CAACa,IAAI,IAAI,cAAc,EAAC;MAC/BhB,eAAe,CAAC,CAAC;IACrB,CAAC,MACG;MACAiB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEf,QAAQ,CAACC,EAAE,CAAC;MAC3CL,aAAa,CAACI,QAAQ,CAACC,EAAE,CAAC,GAAGD,QAAQ,CAACE,OAAO;MAC7CY,OAAO,CAACC,GAAG,CAACnB,aAAa,CAACI,QAAQ,CAACC,EAAE,CAAC,CAAC;MACvCR,MAAM,CAACW,OAAO,CAACL,OAAO,CAAEM,MAAM,IAAK;QAC/B,IAAGA,MAAM,KAAKK,MAAM,IAAIL,MAAM,CAACW,UAAU,KAAKzB,SAAS,CAAC0B,IAAI,EAAE;UAC1DZ,MAAM,CAACC,IAAI,CAACK,OAAO,CAAC;QACxB;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAGFxB,IAAI,CAAC+B,MAAM,eACThC,OAAA,CAACP,KAAK,CAACwC,UAAU;EAAAC,QAAA,eACblC,OAAA,CAACH,MAAM;IAAAqC,QAAA,eACHlC,OAAA,CAACF,GAAG;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACK,CACpB,CAAC;;AAED;AACA;AACA;AACA3C,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}